name: Build and deploy Docker app to Azure
on:
  push:
    branches:
      - master

env:
  APPNAME: parkscomputing
  APPLICATIONPATH: Application
  HOSTINGPLAN: parkscomputing
  DOCKERFILEPATH: "./parkscomputing-engine"
  DOTNET_VERSION: 8.0.x
  REGISTRYSKU: "Standard"
  REGISTRYNAME: "parkscomputingacr"
  REGISTRYLOCATION: "South Central US"
  IMAGENAME: "parkscomputingd964"
  RESOURCEGROUPNAME: parkscomputing-rg
  LOCATION: South Central US
  APPINSIGHTSLOCATION: South Central US
  SUBSCRIPTIONID: 40c2eebb-0d78-481a-8e7c-b03305876e57
  SKU: B1 Basic

jobs:
  build:
    name: Build and push application to ACR
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj','global.json') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build and Run unit tests
      run: |
            pushd ${{ env.APPLICATIONPATH }}
            if [ -d "aspnet-core-dotnet-core.UnitTests" ]; then rm -rf aspnet-core-dotnet-core.UnitTests; fi
            if [ -d "aspnet-core-dotnet-core.FunctionalTests" ]; then rm -rf aspnet-core-dotnet-core.FunctionalTests; fi
            dotnet restore
            dotnet build --configuration Release
            dotnet test parkscomputing-engine.UnitTests/parkscomputing-engine.UnitTests.csproj  --verbosity normal
            popd

    # Create Azure container registry
    - uses: azure/arm-deploy@v1
      id: createAcr
      with:
        scope: resourceGroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/containerRegistry-template.json
        parameters: registryName="${{ env.REGISTRYNAME }}" registryLocation="${{ env.REGISTRYLOCATION }}" registrySku="${{ env.REGISTRYSKU }}"

    - name: Fetch ACR credentials
      id: acrCredentials
      continue-on-error: false
      run: |
          acr_username=$(az acr credential show -n ${{ env.REGISTRYNAME }} --query username -o tsv)
          acr_password=$(az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value -o tsv)
          echo "acr_username=$acr_username" >> $GITHUB_OUTPUT
          echo "acr_password=$acr_password" >> $GITHUB_OUTPUT
          echo "::add-mask::$acr_password"

    - name: ACR authentication
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRYNAME }}.azurecr.io
        username: ${{ steps.acrCredentials.outputs.acr_username }}
        password: ${{ steps.acrCredentials.outputs.acr_password }}

    - name: Docker Build & Push to ACR
      run: |
        echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
        cd "$GITHUB_WORKSPACE/${{env.APPLICATIONPATH}}"
        IMAGE=${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}
        docker build . -f  "${{env.DOCKERFILEPATH}}/Dockerfile" \
          -t $IMAGE:${{ github.sha }} \
          -t $IMAGE:latest \
          --label org.opencontainers.image.revision=${{ github.sha }} \
          --label org.opencontainers.image.source=${{ github.repository }} \
          --label org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        docker push $IMAGE:${{ github.sha }}
        docker push $IMAGE:latest

  deploy:
    name: Deploy application to Azure Web App
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/arm-deploy@v1
      id: deploy
      with:
        scope: resourceGroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: ./ArmTemplates/container-webapp-template.json
        parameters: webAppName="${{ env.APPNAME }}" hostingPlanName="${{ env.HOSTINGPLAN }}" sku="${{ env.SKU }}" appInsightsLocation="${{ env.APPINSIGHTSLOCATION }}" registryName="${{ env.REGISTRYNAME }}" imageName="${{ env.IMAGENAME }}" registryLocation="${{ env.REGISTRYLOCATION }}" registrySku="${{ env.REGISTRYSKU }}"

    - name: Get ACR credentials
      id: getACRCred
      run: |
           acr_username=$(az acr credential show -n ${{ env.REGISTRYNAME }} --query username -o tsv | xargs)
           acr_password=$(az acr credential show -n ${{ env.REGISTRYNAME }} --query passwords[0].value -o tsv | xargs)
           echo "acr_username=$acr_username" >> $GITHUB_OUTPUT
           echo "acr_password=$acr_password" >> $GITHUB_OUTPUT
           echo "::add-mask::$acr_password"

    - name: 'Deploy to Azure Web App for Container'
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.APPNAME }}
        images: ${{ env.REGISTRYNAME }}.azurecr.io/${{ env.IMAGENAME }}:${{ github.sha }}

  functional-tests:
    name: Functional tests
    runs-on: windows-latest
    needs: deploy
    steps:
    - uses: actions/checkout@master

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Update web app url in Run Settings
      shell: powershell
      run: |
          cd Application\parkscomputing-engine.FunctionalTests
          [xml]$runSetting = Get-Content functionalTests.runsettings
          $runSetting.RunSettings.TestRunParameters.ChildNodes.Item(0).value = 'https://${{ env.APPNAME }}.azurewebsites.net/'
          $runSetting.Save("$(pwd)/functionalTests.runsettings")

    - name: Run tests
      continue-on-error: false
      run: |
          cd Application\parkscomputing-engine.FunctionalTests
          dotnet test parkscomputing-engine.FunctionalTests.csproj -s functionalTests.runsettings
